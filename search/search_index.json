{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>python package for interacting with the Redash API</p> <p> </p>"},{"location":"#features","title":"Features","text":"<ul> <li>Complete access to all endpoints in the Redash API</li> <li>Pagination by default</li> <li>Duplicate dashboards</li> <li>Manage users and groups</li> <li>Duplicate queries with differerent source tables</li> </ul>"},{"location":"#implemented-services","title":"Implemented Services","text":"<ul> <li> Dashboards</li> <li> Queries</li> <li> Data Sources</li> <li> Alerts</li> <li> Users</li> <li> Destinations</li> <li> Groups</li> <li> query_snippets</li> <li> Widgets*</li> </ul> <p>* widgets endpoint does not support GET requests, only update, delete and create.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>an API key is required in addition to the instance's host URL.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install redash-python\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<pre><code>from redash_python import Redash\n\nrd = Redash(base_url=\"\", api_key=\"\")\n\n\n# get all dashboards\ndashboards = rd.dashboards.get_all()\n\n# get specific dashboards by id\ndash = rd.dashboards.get(1)\n\n# get by slug or name\nquery = rd.queries.get_by_name(\"my-dashboard\")\n\n# get by tags\nq = rd.queries.get_by_tags([\"my-tag\"])\n\n# get without tags\ndash = rd.dashboards.get_by_tags([\"my-tag\"], without=True)\n\n# Duplicate query with a different table as source\nques = rd.queries\nques.duplicate_query_table(\n    query=ques.get(1),\n    table_map={\"old_table\": \"new_table\"},\n    tags=[\"admin\", \"test\"],\n    publish=True,\n)\n\n# get a list of implemented API endpoints\nprint(rd.services)\n\n# get a list of implemented endpoints in a service\nprint(rd.users)\n</code></pre> <p>for a full list of implemented methods in each service, print the service object.</p> <pre><code>&gt;&gt;&gt; print(client.dashboards)\nDashboardsService(attributes: ['endpoint'], methods: ['create', 'create_widget', 'delete', 'duplicate', 'exists', 'favorite', 'favorited', 'get', 'get_all', 'get_by_name', 'get_by_tags', 'get_id', 'get_slug', 'paginate', 'publish', 'refresh', 'share', 'unfavorite', 'unpublish', 'update'])\n</code></pre> <p>for more examples on usage, see examples folder on github.</p>"},{"location":"#development","title":"Development","text":"<p>before starting development, install dev depndencies:</p> <pre><code>pip install redash-python[dev]\n</code></pre>"},{"location":"#architecture","title":"Architecture","text":"<p>this library implements a services based architecture splitting each API endpoint group to its own service, on top of which is the <code>Redash</code> class. all the services share base classes from mixins that make it easier to share common behavior and allows rapid development for any new endpoints. for instance adding query_snippets is as simple as:</p> <pre><code>from .base import BaseService\nfrom .mixins import CommonMixin, NameMixin, PrintMixin\n\n\nclass QSnipsService(CommonMixin, NameMixin, PrintMixin):\n    def __init__(self, base: BaseService) -&gt; None:\n        # init mixins\n        CommonMixin.__init__(self, base)\n\n        self.__base = base\n        self.endpoint = \"/api/query_snippets\"\n</code></pre>"},{"location":"#directory-structure","title":"Directory Structure","text":"<pre><code>redash_python\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 redash.py               # Services wrapper\n\u2514\u2500\u2500 services                # implemented services\n\u251c\u2500\u2500 base.py             # Base service class\n\u2514\u2500\u2500 mixins.py           # Mixins for services with shared functionality\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome, please open an issue or PR to propse any changes.</p>"},{"location":"#license","title":"License","text":""},{"location":"api/redash/","title":"Redash","text":""},{"location":"api/redash/#class-redash","title":"Class Redash","text":"<pre><code>class Redash()\n</code></pre> <p>[view_source]</p> <p>Top Class of The Redash API Client hierarchy.</p> <p>Arguments:</p> <ul> <li><code>base_url</code> str - The base URL of the Redash instance.</li> <li><code>api_key</code> str - The API key for the Redash instance.</li> </ul> <p>Usage:</p> <p>from redash_python import Redash rd = Redash(\"https://redash.example.com\", \"API_KEY\") rd.dashboards.get_all()</p> <p></p> <p></p>"},{"location":"api/redash/#test_credentials","title":"test_credentials","text":"<pre><code>def test_credentials()\n</code></pre> <p>[view_source]</p> <p>Test whether current credentials are valid</p>"},{"location":"api/services/alerts/","title":"Alerts","text":"<p>this service has no specific implementations other than the default mixins.</p> <p></p> <p></p>"},{"location":"api/services/alerts/#class-commonmixin","title":"Class CommonMixin","text":"<pre><code>class CommonMixin()\n</code></pre> <p>[view_source]</p> <p>Mixin with common methods for services.</p> <p></p> <p></p>"},{"location":"api/services/alerts/#get","title":"get","text":"<pre><code>def get(id: int) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Fetch one by ID</p> <p></p> <p></p>"},{"location":"api/services/alerts/#get_all","title":"get_all","text":"<pre><code>def get_all() -&gt; List[Dict]\n</code></pre> <p>[view_source]</p> <p>fetch all objects.</p> <p></p> <p></p>"},{"location":"api/services/alerts/#update","title":"update","text":"<pre><code>def update(id: int, data: Dict) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Update by ID</p> <p></p> <p></p>"},{"location":"api/services/alerts/#create","title":"create","text":"<pre><code>def create(data: Dict) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Create a new object with data</p> <p></p> <p></p>"},{"location":"api/services/alerts/#delete","title":"delete","text":"<pre><code>def delete(id: int) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Delete by ID</p> <p></p> <p></p>"},{"location":"api/services/alerts/#class-namemixin","title":"Class NameMixin","text":"<pre><code>class NameMixin()\n</code></pre> <p>[view_source]</p> <p>Mixin for nameable services (by name or slug).</p> <p></p> <p></p>"},{"location":"api/services/alerts/#exists","title":"exists","text":"<pre><code>def exists(name_or_slug: str) -&gt; bool\n</code></pre> <p>[view_source]</p> <p>Check if an object with given <code>name_or_slug</code> exists</p> <p></p> <p></p>"},{"location":"api/services/alerts/#get_by_name","title":"get_by_name","text":"<pre><code>def get_by_name(name_or_slug: str) -&gt; Optional[Dict]\n</code></pre> <p>[view_source]</p> <p>Get by name or slug</p> <p></p> <p></p>"},{"location":"api/services/alerts/#get_id","title":"get_id","text":"<pre><code>def get_id(name_or_slug: str) -&gt; Optional[int]\n</code></pre> <p>[view_source]</p> <p>Get the ID for an object by name or slug, returns None if not found</p> <p></p> <p></p>"},{"location":"api/services/alerts/#class-printmixin","title":"Class PrintMixin","text":"<pre><code>class PrintMixin()\n</code></pre> <p>[view_source]</p> <p>Mixin class for printing data</p>"},{"location":"api/services/base/","title":"Base","text":""},{"location":"api/services/base/#class-baseservice","title":"Class BaseService","text":"<pre><code>class BaseService()\n</code></pre> <p>[view_source]</p> <p>Singleton Base Service class</p> <p></p> <p></p>"},{"location":"api/services/base/#post","title":"post","text":"<pre><code>@final\ndef post(endpoint: str, data: Dict, **kwargs) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Perform a POST request to the endpoint with the given data</p> <p></p> <p></p>"},{"location":"api/services/base/#get","title":"get","text":"<pre><code>@final\ndef get(endpoint: str, data: Optional[Dict] = None, **kwargs) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Perform a GET request to the endpoint</p> <p></p> <p></p>"},{"location":"api/services/base/#delete","title":"delete","text":"<pre><code>@final\ndef delete(endpoint: str, **kwargs) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Perform a DELETE request to the endpoint</p>"},{"location":"api/services/dashboards/","title":"Dashboards","text":""},{"location":"api/services/dashboards/#class-dashboardsservice","title":"Class DashboardsService","text":"<pre><code>class DashboardsService(FavoriteMixin, CommonMixin, TagsMixin, PublishMixin,\n                        NameMixin, PrintMixin, PaginationMixin)\n</code></pre> <p>[view_source]</p> <p></p> <p></p>"},{"location":"api/services/dashboards/#get_slug","title":"get_slug","text":"<pre><code>def get_slug(dashboard_id: int) -&gt; Optional[str]\n</code></pre> <p>[view_source]</p> <p>Get the slug for a dashboard by ID</p> <p></p> <p></p>"},{"location":"api/services/dashboards/#refresh","title":"refresh","text":"<pre><code>def refresh(dashboard_id: int) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Refresh a dashboard</p> <p></p> <p></p>"},{"location":"api/services/dashboards/#share","title":"share","text":"<pre><code>def share(dashboard_id: int) -&gt; str\n</code></pre> <p>[view_source]</p> <p>get public url for dashboard</p> <p></p> <p></p>"},{"location":"api/services/dashboards/#duplicate","title":"duplicate","text":"<pre><code>def duplicate(dashboard_id: int, new_name: Optional[str] = None) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Duplicate a dashboard and all its widgets with <code>new_name</code></p> <p></p> <p></p>"},{"location":"api/services/dashboards/#create_widget","title":"create_widget","text":"<pre><code>def create_widget(*,\n                  dashboard_id: int,\n                  visualization_id: Optional[int],\n                  options: Dict,\n                  text: str = \"\") -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>create new widget in given dashboard</p> <p>Arguments:</p> <ul> <li><code>dashboard_id</code> - id of dashboard to create widget in</li> <li><code>visualization_id</code> - id of visualization to use for widget (pass None for text widget)</li> <li><code>options</code> - options to use for widget</li> <li><code>text</code> - text to use for text widget</li> </ul> <p></p> <p></p>"},{"location":"api/services/dashboards/#class-favoritemixin","title":"Class FavoriteMixin","text":"<pre><code>class FavoriteMixin()\n</code></pre> <p>[view_source]</p> <p>Mixin for favoriteable services</p> <p></p> <p></p>"},{"location":"api/services/dashboards/#favorited","title":"favorited","text":"<pre><code>def favorited() -&gt; List[Dict]\n</code></pre> <p>[view_source]</p> <p>Get all favorited objects</p> <p></p> <p></p>"},{"location":"api/services/dashboards/#favorite","title":"favorite","text":"<pre><code>def favorite(id: int) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Favorite an object</p> <p></p> <p></p>"},{"location":"api/services/dashboards/#unfavorite","title":"unfavorite","text":"<pre><code>def unfavorite(id: int) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Unfavorite an object</p> <p></p> <p></p>"},{"location":"api/services/dashboards/#class-commonmixin","title":"Class CommonMixin","text":"<pre><code>class CommonMixin()\n</code></pre> <p>[view_source]</p> <p>Mixin with common methods for services.</p> <p></p> <p></p>"},{"location":"api/services/dashboards/#get","title":"get","text":"<pre><code>def get(id: int) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Fetch one by ID</p> <p></p> <p></p>"},{"location":"api/services/dashboards/#get_all","title":"get_all","text":"<pre><code>def get_all() -&gt; List[Dict]\n</code></pre> <p>[view_source]</p> <p>fetch all objects.</p> <p></p> <p></p>"},{"location":"api/services/dashboards/#update","title":"update","text":"<pre><code>def update(id: int, data: Dict) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Update by ID</p> <p></p> <p></p>"},{"location":"api/services/dashboards/#create","title":"create","text":"<pre><code>def create(data: Dict) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Create a new object with data</p> <p></p> <p></p>"},{"location":"api/services/dashboards/#delete","title":"delete","text":"<pre><code>def delete(id: int) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Delete by ID</p> <p></p> <p></p>"},{"location":"api/services/dashboards/#class-tagsmixin","title":"Class TagsMixin","text":"<pre><code>class TagsMixin()\n</code></pre> <p>[view_source]</p> <p>Mixin for taggable services</p> <p></p> <p></p>"},{"location":"api/services/dashboards/#get_by_tags","title":"get_by_tags","text":"<pre><code>def get_by_tags(tags: List[str],\n                without: bool = False,\n                match_all: bool = True) -&gt; List[Dict]\n</code></pre> <p>[view_source]</p> <p>Get all objects with all or any of <code>tags</code> or all objects without any of <code>tags</code></p> <p></p> <p></p>"},{"location":"api/services/dashboards/#class-publishmixin","title":"Class PublishMixin","text":"<pre><code>class PublishMixin()\n</code></pre> <p>[view_source]</p> <p>Mixin for publishable services</p> <p></p> <p></p>"},{"location":"api/services/dashboards/#publish","title":"publish","text":"<pre><code>def publish(id: int) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Publish an object</p> <p></p> <p></p>"},{"location":"api/services/dashboards/#unpublish","title":"unpublish","text":"<pre><code>def unpublish(id: int) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Unpublish an object</p> <p></p> <p></p>"},{"location":"api/services/dashboards/#class-namemixin","title":"Class NameMixin","text":"<pre><code>class NameMixin()\n</code></pre> <p>[view_source]</p> <p>Mixin for nameable services (by name or slug).</p> <p></p> <p></p>"},{"location":"api/services/dashboards/#exists","title":"exists","text":"<pre><code>def exists(name_or_slug: str) -&gt; bool\n</code></pre> <p>[view_source]</p> <p>Check if an object with given <code>name_or_slug</code> exists</p> <p></p> <p></p>"},{"location":"api/services/dashboards/#get_by_name","title":"get_by_name","text":"<pre><code>def get_by_name(name_or_slug: str) -&gt; Optional[Dict]\n</code></pre> <p>[view_source]</p> <p>Get by name or slug</p> <p></p> <p></p>"},{"location":"api/services/dashboards/#get_id","title":"get_id","text":"<pre><code>def get_id(name_or_slug: str) -&gt; Optional[int]\n</code></pre> <p>[view_source]</p> <p>Get the ID for an object by name or slug, returns None if not found</p> <p></p> <p></p>"},{"location":"api/services/dashboards/#class-printmixin","title":"Class PrintMixin","text":"<pre><code>class PrintMixin()\n</code></pre> <p>[view_source]</p> <p>Mixin class for printing data</p> <p></p> <p></p>"},{"location":"api/services/dashboards/#class-paginationmixin","title":"Class PaginationMixin","text":"<pre><code>class PaginationMixin()\n</code></pre> <p>[view_source]</p> <p>Mixin for paginated services</p> <p></p> <p></p>"},{"location":"api/services/dashboards/#paginate","title":"paginate","text":"<pre><code>def paginate(page: int = 1, page_size: int = 100, **kwargs) -&gt; List[Dict]\n</code></pre> <p>[view_source]</p> <p>Load all items of a paginated resource</p> <p></p> <p></p>"},{"location":"api/services/dashboards/#fetch_page","title":"fetch_page","text":"<pre><code>def fetch_page(page: int = 1, page_size: int = 100, **kwargs) -&gt; List[Dict]\n</code></pre> <p>[view_source]</p> <p>Load a page of a paginated resource</p>"},{"location":"api/services/data_sources/","title":"Data Sources","text":"<p>this service has no specific implementations other than the default mixins.</p> <p></p> <p></p>"},{"location":"api/services/data_sources/#class-commonmixin","title":"Class CommonMixin","text":"<pre><code>class CommonMixin()\n</code></pre> <p>[view_source]</p> <p>Mixin with common methods for services.</p> <p></p> <p></p>"},{"location":"api/services/data_sources/#get","title":"get","text":"<pre><code>def get(id: int) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Fetch one by ID</p> <p></p> <p></p>"},{"location":"api/services/data_sources/#get_all","title":"get_all","text":"<pre><code>def get_all() -&gt; List[Dict]\n</code></pre> <p>[view_source]</p> <p>fetch all objects.</p> <p></p> <p></p>"},{"location":"api/services/data_sources/#update","title":"update","text":"<pre><code>def update(id: int, data: Dict) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Update by ID</p> <p></p> <p></p>"},{"location":"api/services/data_sources/#create","title":"create","text":"<pre><code>def create(data: Dict) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Create a new object with data</p> <p></p> <p></p>"},{"location":"api/services/data_sources/#delete","title":"delete","text":"<pre><code>def delete(id: int) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Delete by ID</p> <p></p> <p></p>"},{"location":"api/services/data_sources/#class-namemixin","title":"Class NameMixin","text":"<pre><code>class NameMixin()\n</code></pre> <p>[view_source]</p> <p>Mixin for nameable services (by name or slug).</p> <p></p> <p></p>"},{"location":"api/services/data_sources/#exists","title":"exists","text":"<pre><code>def exists(name_or_slug: str) -&gt; bool\n</code></pre> <p>[view_source]</p> <p>Check if an object with given <code>name_or_slug</code> exists</p> <p></p> <p></p>"},{"location":"api/services/data_sources/#get_by_name","title":"get_by_name","text":"<pre><code>def get_by_name(name_or_slug: str) -&gt; Optional[Dict]\n</code></pre> <p>[view_source]</p> <p>Get by name or slug</p> <p></p> <p></p>"},{"location":"api/services/data_sources/#get_id","title":"get_id","text":"<pre><code>def get_id(name_or_slug: str) -&gt; Optional[int]\n</code></pre> <p>[view_source]</p> <p>Get the ID for an object by name or slug, returns None if not found</p> <p></p> <p></p>"},{"location":"api/services/data_sources/#class-printmixin","title":"Class PrintMixin","text":"<pre><code>class PrintMixin()\n</code></pre> <p>[view_source]</p> <p>Mixin class for printing data</p>"},{"location":"api/services/destinations/","title":"Destinations","text":"<p>this service has no specific implementations other than the default mixins.</p> <p></p> <p></p>"},{"location":"api/services/destinations/#class-commonmixin","title":"Class CommonMixin","text":"<pre><code>class CommonMixin()\n</code></pre> <p>[view_source]</p> <p>Mixin with common methods for services.</p> <p></p> <p></p>"},{"location":"api/services/destinations/#get","title":"get","text":"<pre><code>def get(id: int) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Fetch one by ID</p> <p></p> <p></p>"},{"location":"api/services/destinations/#get_all","title":"get_all","text":"<pre><code>def get_all() -&gt; List[Dict]\n</code></pre> <p>[view_source]</p> <p>fetch all objects.</p> <p></p> <p></p>"},{"location":"api/services/destinations/#update","title":"update","text":"<pre><code>def update(id: int, data: Dict) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Update by ID</p> <p></p> <p></p>"},{"location":"api/services/destinations/#create","title":"create","text":"<pre><code>def create(data: Dict) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Create a new object with data</p> <p></p> <p></p>"},{"location":"api/services/destinations/#delete","title":"delete","text":"<pre><code>def delete(id: int) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Delete by ID</p> <p></p> <p></p>"},{"location":"api/services/destinations/#class-namemixin","title":"Class NameMixin","text":"<pre><code>class NameMixin()\n</code></pre> <p>[view_source]</p> <p>Mixin for nameable services (by name or slug).</p> <p></p> <p></p>"},{"location":"api/services/destinations/#exists","title":"exists","text":"<pre><code>def exists(name_or_slug: str) -&gt; bool\n</code></pre> <p>[view_source]</p> <p>Check if an object with given <code>name_or_slug</code> exists</p> <p></p> <p></p>"},{"location":"api/services/destinations/#get_by_name","title":"get_by_name","text":"<pre><code>def get_by_name(name_or_slug: str) -&gt; Optional[Dict]\n</code></pre> <p>[view_source]</p> <p>Get by name or slug</p> <p></p> <p></p>"},{"location":"api/services/destinations/#get_id","title":"get_id","text":"<pre><code>def get_id(name_or_slug: str) -&gt; Optional[int]\n</code></pre> <p>[view_source]</p> <p>Get the ID for an object by name or slug, returns None if not found</p> <p></p> <p></p>"},{"location":"api/services/destinations/#class-printmixin","title":"Class PrintMixin","text":"<pre><code>class PrintMixin()\n</code></pre> <p>[view_source]</p> <p>Mixin class for printing data</p>"},{"location":"api/services/groups/","title":"Groups","text":"<p>this service has no specific implementations other than the default mixins.</p> <p></p> <p></p>"},{"location":"api/services/groups/#class-commonmixin","title":"Class CommonMixin","text":"<pre><code>class CommonMixin()\n</code></pre> <p>[view_source]</p> <p>Mixin with common methods for services.</p> <p></p> <p></p>"},{"location":"api/services/groups/#get","title":"get","text":"<pre><code>def get(id: int) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Fetch one by ID</p> <p></p> <p></p>"},{"location":"api/services/groups/#get_all","title":"get_all","text":"<pre><code>def get_all() -&gt; List[Dict]\n</code></pre> <p>[view_source]</p> <p>fetch all objects.</p> <p></p> <p></p>"},{"location":"api/services/groups/#update","title":"update","text":"<pre><code>def update(id: int, data: Dict) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Update by ID</p> <p></p> <p></p>"},{"location":"api/services/groups/#create","title":"create","text":"<pre><code>def create(data: Dict) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Create a new object with data</p> <p></p> <p></p>"},{"location":"api/services/groups/#delete","title":"delete","text":"<pre><code>def delete(id: int) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Delete by ID</p> <p></p> <p></p>"},{"location":"api/services/groups/#class-namemixin","title":"Class NameMixin","text":"<pre><code>class NameMixin()\n</code></pre> <p>[view_source]</p> <p>Mixin for nameable services (by name or slug).</p> <p></p> <p></p>"},{"location":"api/services/groups/#exists","title":"exists","text":"<pre><code>def exists(name_or_slug: str) -&gt; bool\n</code></pre> <p>[view_source]</p> <p>Check if an object with given <code>name_or_slug</code> exists</p> <p></p> <p></p>"},{"location":"api/services/groups/#get_by_name","title":"get_by_name","text":"<pre><code>def get_by_name(name_or_slug: str) -&gt; Optional[Dict]\n</code></pre> <p>[view_source]</p> <p>Get by name or slug</p> <p></p> <p></p>"},{"location":"api/services/groups/#get_id","title":"get_id","text":"<pre><code>def get_id(name_or_slug: str) -&gt; Optional[int]\n</code></pre> <p>[view_source]</p> <p>Get the ID for an object by name or slug, returns None if not found</p> <p></p> <p></p>"},{"location":"api/services/groups/#class-printmixin","title":"Class PrintMixin","text":"<pre><code>class PrintMixin()\n</code></pre> <p>[view_source]</p> <p>Mixin class for printing data</p>"},{"location":"api/services/mixins/","title":"Mixins","text":"<p>Classes contanting shared functionality used by all other services.</p> <p></p> <p></p>"},{"location":"api/services/mixins/#class-printmixin","title":"Class PrintMixin","text":"<pre><code>class PrintMixin()\n</code></pre> <p>[view_source]</p> <p>Mixin class for printing data</p> <p></p> <p></p>"},{"location":"api/services/mixins/#class-commonmixin","title":"Class CommonMixin","text":"<pre><code>class CommonMixin()\n</code></pre> <p>[view_source]</p> <p>Mixin with common methods for services.</p> <p></p> <p></p>"},{"location":"api/services/mixins/#get","title":"get","text":"<pre><code>def get(id: int) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Fetch one by ID</p> <p></p> <p></p>"},{"location":"api/services/mixins/#get_all","title":"get_all","text":"<pre><code>def get_all() -&gt; List[Dict]\n</code></pre> <p>[view_source]</p> <p>fetch all objects.</p> <p></p> <p></p>"},{"location":"api/services/mixins/#update","title":"update","text":"<pre><code>def update(id: int, data: Dict) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Update by ID</p> <p></p> <p></p>"},{"location":"api/services/mixins/#create","title":"create","text":"<pre><code>def create(data: Dict) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Create a new object with data</p> <p></p> <p></p>"},{"location":"api/services/mixins/#delete","title":"delete","text":"<pre><code>def delete(id: int) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Delete by ID</p> <p></p> <p></p>"},{"location":"api/services/mixins/#class-namemixin","title":"Class NameMixin","text":"<pre><code>class NameMixin()\n</code></pre> <p>[view_source]</p> <p>Mixin for nameable services (by name or slug).</p> <p></p> <p></p>"},{"location":"api/services/mixins/#exists","title":"exists","text":"<pre><code>def exists(name_or_slug: str) -&gt; bool\n</code></pre> <p>[view_source]</p> <p>Check if an object with given <code>name_or_slug</code> exists</p> <p></p> <p></p>"},{"location":"api/services/mixins/#get_by_name","title":"get_by_name","text":"<pre><code>def get_by_name(name_or_slug: str) -&gt; Optional[Dict]\n</code></pre> <p>[view_source]</p> <p>Get by name or slug</p> <p></p> <p></p>"},{"location":"api/services/mixins/#get_id","title":"get_id","text":"<pre><code>def get_id(name_or_slug: str) -&gt; Optional[int]\n</code></pre> <p>[view_source]</p> <p>Get the ID for an object by name or slug, returns None if not found</p> <p></p> <p></p>"},{"location":"api/services/mixins/#class-tagsmixin","title":"Class TagsMixin","text":"<pre><code>class TagsMixin()\n</code></pre> <p>[view_source]</p> <p>Mixin for taggable services</p> <p></p> <p></p>"},{"location":"api/services/mixins/#get_by_tags","title":"get_by_tags","text":"<pre><code>def get_by_tags(tags: List[str],\n                without: bool = False,\n                match_all: bool = True) -&gt; List[Dict]\n</code></pre> <p>[view_source]</p> <p>Get all objects with all or any of <code>tags</code> or all objects without any of <code>tags</code></p> <p></p> <p></p>"},{"location":"api/services/mixins/#class-publishmixin","title":"Class PublishMixin","text":"<pre><code>class PublishMixin()\n</code></pre> <p>[view_source]</p> <p>Mixin for publishable services</p> <p></p> <p></p>"},{"location":"api/services/mixins/#publish","title":"publish","text":"<pre><code>def publish(id: int) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Publish an object</p> <p></p> <p></p>"},{"location":"api/services/mixins/#unpublish","title":"unpublish","text":"<pre><code>def unpublish(id: int) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Unpublish an object</p> <p></p> <p></p>"},{"location":"api/services/mixins/#class-favoritemixin","title":"Class FavoriteMixin","text":"<pre><code>class FavoriteMixin()\n</code></pre> <p>[view_source]</p> <p>Mixin for favoriteable services</p> <p></p> <p></p>"},{"location":"api/services/mixins/#favorited","title":"favorited","text":"<pre><code>def favorited() -&gt; List[Dict]\n</code></pre> <p>[view_source]</p> <p>Get all favorited objects</p> <p></p> <p></p>"},{"location":"api/services/mixins/#favorite","title":"favorite","text":"<pre><code>def favorite(id: int) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Favorite an object</p> <p></p> <p></p>"},{"location":"api/services/mixins/#unfavorite","title":"unfavorite","text":"<pre><code>def unfavorite(id: int) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Unfavorite an object</p> <p></p> <p></p>"},{"location":"api/services/mixins/#class-paginationmixin","title":"Class PaginationMixin","text":"<pre><code>class PaginationMixin()\n</code></pre> <p>[view_source]</p> <p>Mixin for paginated services</p> <p></p> <p></p>"},{"location":"api/services/mixins/#paginate","title":"paginate","text":"<pre><code>def paginate(page: int = 1, page_size: int = 100, **kwargs) -&gt; List[Dict]\n</code></pre> <p>[view_source]</p> <p>Load all items of a paginated resource</p> <p></p> <p></p>"},{"location":"api/services/mixins/#fetch_page","title":"fetch_page","text":"<pre><code>def fetch_page(page: int = 1, page_size: int = 100, **kwargs) -&gt; List[Dict]\n</code></pre> <p>[view_source]</p> <p>Load a page of a paginated resource</p>"},{"location":"api/services/queries/","title":"Queries","text":""},{"location":"api/services/queries/#class-queriesservice","title":"Class QueriesService","text":"<pre><code>class QueriesService(FavoriteMixin, CommonMixin, TagsMixin, PublishMixin,\n                     NameMixin, PrintMixin, PaginationMixin)\n</code></pre> <p>[view_source]</p> <p></p> <p></p>"},{"location":"api/services/queries/#refresh","title":"refresh","text":"<pre><code>def refresh(query_id: int) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Refresh a query</p> <p></p> <p></p>"},{"location":"api/services/queries/#fork","title":"fork","text":"<pre><code>def fork(query_id: int, new_name: str = None) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Fork a query with a new name if provided</p> <p></p> <p></p>"},{"location":"api/services/queries/#scheduled","title":"scheduled","text":"<pre><code>def scheduled() -&gt; List[Dict]\n</code></pre> <p>[view_source]</p> <p>Get all scheduled queries</p> <p></p> <p></p>"},{"location":"api/services/queries/#update_visualization","title":"update_visualization","text":"<pre><code>def update_visualization(vis_id: int, data: Dict) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Update a visualization with <code>data</code></p> <p></p> <p></p>"},{"location":"api/services/queries/#duplicate_query_table","title":"duplicate_query_table","text":"<pre><code>def duplicate_query_table(*,\n                          query: Dict,\n                          new_name: str = None,\n                          table_map: Dict[str, str],\n                          tags: List[str],\n                          new_data_source_id: Optional[int] = None,\n                          publish: bool = True) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Duplicate query with source tables replaced according to table_map.</p> <p>Arguments:</p> <ul> <li><code>query(Dict)</code> - query data object</li> <li><code>new_name(str)</code> - new query name (optional)</li> <li><code>table_map(Dict)</code> - mapping of old to new tables</li> <li><code>tags(List)</code> - tags to add to new query</li> <li><code>new_data_source_id(int)</code> - new data source id (optional)</li> <li><code>publish(bool)</code> - whether to publish the new query</li> </ul> <p>Returns:</p> <ul> <li><code>Dict</code> - new query data object</li> </ul> <p>Example:</p> <p>query = queries.get(query_id) table_map = {     \"old_table\": \"new_table\",     \"old_table2\": \"new_table2\", } tags = [\"tag1\", \"tag2\"] new_query = queries.duplicate_query_table(     query=query,     new_name=\"new_query_name\",     table_map=table_map,     new_data_source_id=rd.data_sources.get_by_name(\"new_data_source\").id,     tags=tags, )</p> <p></p> <p></p>"},{"location":"api/services/queries/#class-favoritemixin","title":"Class FavoriteMixin","text":"<pre><code>class FavoriteMixin()\n</code></pre> <p>[view_source]</p> <p>Mixin for favoriteable services</p> <p></p> <p></p>"},{"location":"api/services/queries/#favorited","title":"favorited","text":"<pre><code>def favorited() -&gt; List[Dict]\n</code></pre> <p>[view_source]</p> <p>Get all favorited objects</p> <p></p> <p></p>"},{"location":"api/services/queries/#favorite","title":"favorite","text":"<pre><code>def favorite(id: int) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Favorite an object</p> <p></p> <p></p>"},{"location":"api/services/queries/#unfavorite","title":"unfavorite","text":"<pre><code>def unfavorite(id: int) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Unfavorite an object</p> <p></p> <p></p>"},{"location":"api/services/queries/#class-commonmixin","title":"Class CommonMixin","text":"<pre><code>class CommonMixin()\n</code></pre> <p>[view_source]</p> <p>Mixin with common methods for services.</p> <p></p> <p></p>"},{"location":"api/services/queries/#get","title":"get","text":"<pre><code>def get(id: int) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Fetch one by ID</p> <p></p> <p></p>"},{"location":"api/services/queries/#get_all","title":"get_all","text":"<pre><code>def get_all() -&gt; List[Dict]\n</code></pre> <p>[view_source]</p> <p>fetch all objects.</p> <p></p> <p></p>"},{"location":"api/services/queries/#update","title":"update","text":"<pre><code>def update(id: int, data: Dict) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Update by ID</p> <p></p> <p></p>"},{"location":"api/services/queries/#create","title":"create","text":"<pre><code>def create(data: Dict) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Create a new object with data</p> <p></p> <p></p>"},{"location":"api/services/queries/#delete","title":"delete","text":"<pre><code>def delete(id: int) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Delete by ID</p> <p></p> <p></p>"},{"location":"api/services/queries/#class-tagsmixin","title":"Class TagsMixin","text":"<pre><code>class TagsMixin()\n</code></pre> <p>[view_source]</p> <p>Mixin for taggable services</p> <p></p> <p></p>"},{"location":"api/services/queries/#get_by_tags","title":"get_by_tags","text":"<pre><code>def get_by_tags(tags: List[str],\n                without: bool = False,\n                match_all: bool = True) -&gt; List[Dict]\n</code></pre> <p>[view_source]</p> <p>Get all objects with all or any of <code>tags</code> or all objects without any of <code>tags</code></p> <p></p> <p></p>"},{"location":"api/services/queries/#class-publishmixin","title":"Class PublishMixin","text":"<pre><code>class PublishMixin()\n</code></pre> <p>[view_source]</p> <p>Mixin for publishable services</p> <p></p> <p></p>"},{"location":"api/services/queries/#publish","title":"publish","text":"<pre><code>def publish(id: int) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Publish an object</p> <p></p> <p></p>"},{"location":"api/services/queries/#unpublish","title":"unpublish","text":"<pre><code>def unpublish(id: int) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Unpublish an object</p> <p></p> <p></p>"},{"location":"api/services/queries/#class-namemixin","title":"Class NameMixin","text":"<pre><code>class NameMixin()\n</code></pre> <p>[view_source]</p> <p>Mixin for nameable services (by name or slug).</p> <p></p> <p></p>"},{"location":"api/services/queries/#exists","title":"exists","text":"<pre><code>def exists(name_or_slug: str) -&gt; bool\n</code></pre> <p>[view_source]</p> <p>Check if an object with given <code>name_or_slug</code> exists</p> <p></p> <p></p>"},{"location":"api/services/queries/#get_by_name","title":"get_by_name","text":"<pre><code>def get_by_name(name_or_slug: str) -&gt; Optional[Dict]\n</code></pre> <p>[view_source]</p> <p>Get by name or slug</p> <p></p> <p></p>"},{"location":"api/services/queries/#get_id","title":"get_id","text":"<pre><code>def get_id(name_or_slug: str) -&gt; Optional[int]\n</code></pre> <p>[view_source]</p> <p>Get the ID for an object by name or slug, returns None if not found</p> <p></p> <p></p>"},{"location":"api/services/queries/#class-printmixin","title":"Class PrintMixin","text":"<pre><code>class PrintMixin()\n</code></pre> <p>[view_source]</p> <p>Mixin class for printing data</p> <p></p> <p></p>"},{"location":"api/services/queries/#class-paginationmixin","title":"Class PaginationMixin","text":"<pre><code>class PaginationMixin()\n</code></pre> <p>[view_source]</p> <p>Mixin for paginated services</p> <p></p> <p></p>"},{"location":"api/services/queries/#paginate","title":"paginate","text":"<pre><code>def paginate(page: int = 1, page_size: int = 100, **kwargs) -&gt; List[Dict]\n</code></pre> <p>[view_source]</p> <p>Load all items of a paginated resource</p> <p></p> <p></p>"},{"location":"api/services/queries/#fetch_page","title":"fetch_page","text":"<pre><code>def fetch_page(page: int = 1, page_size: int = 100, **kwargs) -&gt; List[Dict]\n</code></pre> <p>[view_source]</p> <p>Load a page of a paginated resource</p>"},{"location":"api/services/query_snippets/","title":"Query Snippets","text":"<p>this service has no specific implementations other than the default mixins.</p> <p></p> <p></p>"},{"location":"api/services/query_snippets/#class-commonmixin","title":"Class CommonMixin","text":"<pre><code>class CommonMixin()\n</code></pre> <p>[view_source]</p> <p>Mixin with common methods for services.</p> <p></p> <p></p>"},{"location":"api/services/query_snippets/#get","title":"get","text":"<pre><code>def get(id: int) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Fetch one by ID</p> <p></p> <p></p>"},{"location":"api/services/query_snippets/#get_all","title":"get_all","text":"<pre><code>def get_all() -&gt; List[Dict]\n</code></pre> <p>[view_source]</p> <p>fetch all objects.</p> <p></p> <p></p>"},{"location":"api/services/query_snippets/#update","title":"update","text":"<pre><code>def update(id: int, data: Dict) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Update by ID</p> <p></p> <p></p>"},{"location":"api/services/query_snippets/#create","title":"create","text":"<pre><code>def create(data: Dict) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Create a new object with data</p> <p></p> <p></p>"},{"location":"api/services/query_snippets/#delete","title":"delete","text":"<pre><code>def delete(id: int) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Delete by ID</p> <p></p> <p></p>"},{"location":"api/services/query_snippets/#class-namemixin","title":"Class NameMixin","text":"<pre><code>class NameMixin()\n</code></pre> <p>[view_source]</p> <p>Mixin for nameable services (by name or slug).</p> <p></p> <p></p>"},{"location":"api/services/query_snippets/#exists","title":"exists","text":"<pre><code>def exists(name_or_slug: str) -&gt; bool\n</code></pre> <p>[view_source]</p> <p>Check if an object with given <code>name_or_slug</code> exists</p> <p></p> <p></p>"},{"location":"api/services/query_snippets/#get_by_name","title":"get_by_name","text":"<pre><code>def get_by_name(name_or_slug: str) -&gt; Optional[Dict]\n</code></pre> <p>[view_source]</p> <p>Get by name or slug</p> <p></p> <p></p>"},{"location":"api/services/query_snippets/#get_id","title":"get_id","text":"<pre><code>def get_id(name_or_slug: str) -&gt; Optional[int]\n</code></pre> <p>[view_source]</p> <p>Get the ID for an object by name or slug, returns None if not found</p> <p></p> <p></p>"},{"location":"api/services/query_snippets/#class-printmixin","title":"Class PrintMixin","text":"<pre><code>class PrintMixin()\n</code></pre> <p>[view_source]</p> <p>Mixin class for printing data</p>"},{"location":"api/services/users/","title":"Users","text":"<p>this service has no specific implementations other than the default mixins.</p> <p></p> <p></p>"},{"location":"api/services/users/#class-usersservice","title":"Class UsersService","text":"<pre><code>class UsersService(CommonMixin, NameMixin, PrintMixin)\n</code></pre> <p>[view_source]</p> <p></p> <p></p>"},{"location":"api/services/users/#disable","title":"disable","text":"<pre><code>def disable(user_id: int) -&gt; None\n</code></pre> <p>[view_source]</p> <p>disable user</p> <p></p> <p></p>"},{"location":"api/services/users/#add_group","title":"add_group","text":"<pre><code>def add_group(user_id: int, group_id: int) -&gt; None\n</code></pre> <p>[view_source]</p> <p>add user to group</p> <p></p> <p></p>"},{"location":"api/services/users/#remove_group","title":"remove_group","text":"<pre><code>def remove_group(user_id: int, group_id: int) -&gt; None\n</code></pre> <p>[view_source]</p> <p>remove user from group</p> <p></p> <p></p>"},{"location":"api/services/users/#class-commonmixin","title":"Class CommonMixin","text":"<pre><code>class CommonMixin()\n</code></pre> <p>[view_source]</p> <p>Mixin with common methods for services.</p> <p></p> <p></p>"},{"location":"api/services/users/#get","title":"get","text":"<pre><code>def get(id: int) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Fetch one by ID</p> <p></p> <p></p>"},{"location":"api/services/users/#get_all","title":"get_all","text":"<pre><code>def get_all() -&gt; List[Dict]\n</code></pre> <p>[view_source]</p> <p>fetch all objects.</p> <p></p> <p></p>"},{"location":"api/services/users/#update","title":"update","text":"<pre><code>def update(id: int, data: Dict) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Update by ID</p> <p></p> <p></p>"},{"location":"api/services/users/#create","title":"create","text":"<pre><code>def create(data: Dict) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Create a new object with data</p> <p></p> <p></p>"},{"location":"api/services/users/#delete","title":"delete","text":"<pre><code>def delete(id: int) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Delete by ID</p> <p></p> <p></p>"},{"location":"api/services/users/#class-namemixin","title":"Class NameMixin","text":"<pre><code>class NameMixin()\n</code></pre> <p>[view_source]</p> <p>Mixin for nameable services (by name or slug).</p> <p></p> <p></p>"},{"location":"api/services/users/#exists","title":"exists","text":"<pre><code>def exists(name_or_slug: str) -&gt; bool\n</code></pre> <p>[view_source]</p> <p>Check if an object with given <code>name_or_slug</code> exists</p> <p></p> <p></p>"},{"location":"api/services/users/#get_by_name","title":"get_by_name","text":"<pre><code>def get_by_name(name_or_slug: str) -&gt; Optional[Dict]\n</code></pre> <p>[view_source]</p> <p>Get by name or slug</p> <p></p> <p></p>"},{"location":"api/services/users/#get_id","title":"get_id","text":"<pre><code>def get_id(name_or_slug: str) -&gt; Optional[int]\n</code></pre> <p>[view_source]</p> <p>Get the ID for an object by name or slug, returns None if not found</p> <p></p> <p></p>"},{"location":"api/services/users/#class-printmixin","title":"Class PrintMixin","text":"<pre><code>class PrintMixin()\n</code></pre> <p>[view_source]</p> <p>Mixin class for printing data</p>"},{"location":"api/services/widgets/","title":"Widgets","text":""},{"location":"api/services/widgets/#class-widgetsservice","title":"Class WidgetsService","text":"<pre><code>class WidgetsService(CommonMixin, PrintMixin)\n</code></pre> <p>[view_source]</p> <p>Service for managing widgets</p> <ul> <li>only supports create, delete and update (DELETE, POST)</li> <li>does not support get_all or get (GET)</li> </ul> <p></p> <p></p>"},{"location":"api/services/widgets/#create","title":"create","text":"<pre><code>def create(*,\n           dashboard_id: int,\n           visualization_id: Optional[int],\n           options: Dict,\n           text: str = \"\") -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>create new widget in given dashboard</p> <p>Arguments:</p> <ul> <li><code>dashboard_id</code> - id of dashboard to create widget in</li> <li><code>visualization_id</code> - id of visualization to use for widget (pass None for text widget)</li> <li><code>options</code> - options to use for widget</li> <li><code>text</code> - text to use for text widget</li> </ul>"},{"location":"api/services/widgets/#commonmixin","title":"CommonMixin","text":""},{"location":"api/services/widgets/#update","title":"update","text":"<pre><code>def update(id: int, data: Dict) -&gt; Dict\n</code></pre> <p>[view_source]</p> <p>Update by ID</p> <p></p> <p></p>"},{"location":"api/services/widgets/#delete","title":"delete","text":"<pre><code>def delete(id: int) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Delete by ID</p> <p></p> <p></p>"},{"location":"api/services/widgets/#class-printmixin","title":"Class PrintMixin","text":"<pre><code>class PrintMixin()\n</code></pre> <p>[view_source]</p> <p>Mixin class for printing data</p>"},{"location":"examples/archive_user/","title":"Archive User","text":"<p>Archive all queries and dashboards witohut given tags</p> <p></p> <p></p>"},{"location":"examples/archive_user/#clean","title":"clean","text":"<pre><code>@app.command(no_args_is_help=True)\ndef clean(host_url: str = Argument(None,\n                                   envvar=\"REDASH_HOST\",\n                                   help=\"Redash host\"),\n          api_key: str = Argument(None,\n                                  envvar=\"REDASH_API_KEY\",\n                                  help=\"Redash api key\")) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Clean up all the customer dashboards on redash</p> <p>Arguments:</p> <ul> <li><code>host_url</code> - Redash host</li> <li><code>api_key</code> - Redash api key</li> </ul> <p>Returns:</p> <p>None</p> <p>Usage:   <pre><code>python archive_user.py host_url api_key\n</code></pre></p>"},{"location":"examples/create_client_dashboard/","title":"Create client dashboard","text":""},{"location":"examples/create_client_dashboard/#create_client_template","title":"create_client_template","text":"<pre><code>@app.command(no_args_is_help=True)\ndef create_client_template(\n        api_host: str = Argument(None,\n                                 envvar=\"API_HOST\",\n                                 help=\"Redash API host\"),\n        api_key: str = Argument(None, envvar=\"API_KEY\", help=\"Redash API key\"),\n        client_name: str = Argument(None, help=\"Client name\"),\n        template_tags: List[str] = Argument(None, help=\"Template tags\"),\n        to_remove_keywords: List[str] = Argument(\n            None, help=\"Keywords to remove widgets with\")) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Create client dashboard template based on another template with given <code>template_tags</code> with widgets containing <code>to_remove_keywords</code> in their viualization name removed.</p> <p>Arguments:</p> <ul> <li><code>api_host</code> - Redash API host</li> <li><code>api_key</code> - Redash API key</li> <li><code>client_name</code> - Client name</li> <li><code>template_tags</code> - tags of template to clone from</li> <li><code>to_remove_tags</code> - keywords to remove widgets from new dashboard with</li> </ul> <p>Usage: <pre><code>    python examples/create_client_template.py --api_host https://redash.example.com --api_key 1234567890 --client_name test --template_tags template prod\n</code></pre></p>"}]}