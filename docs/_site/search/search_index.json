{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"python package for interacting with the Redash API Features Complete access to all endpoints in the Redash API Pagination by default Duplicate dashboards Manage users and groups Duplicate queries with differerent source tables Implemented Services Dashboards Queries Data Sources Alerts Users Destinations Groups query_snippets Widgets* * widgets endpoint does not support GET requests, only update, delete and create. Getting Started an API key is required in addition to the instance's host URL. Installation pip install redash-python Usage from redash_python import Redash rd = Redash ( base_url = \"\" , api_key = \"\" ) # get all dashboards dashboards = rd . dashboards . get_all () # get specific dashboards by id dash = rd . dashboards . get ( 1 ) # get by slug or name query = rd . queries . get_by_name ( \"my-dashboard\" ) # get by tags q = rd . queries . get_by_tags ([ \"my-tag\" ]) # get without tags dash = rd . dashboards . get_by_tags ([ \"my-tag\" ], without = True ) # Duplicate query with a different table as source ques = rd . queries ques . duplicate_query_table ( query = ques . get ( 1 ), table_map = { \"old_table\" : \"new_table\" }, tags = [ \"admin\" , \"test\" ], publish = True , ) # get a list of implemented API endpoints print ( rd . services ) # get a list of implemented endpoints in a service print ( rd . users ) for a full list of implemented methods in each service, print the service object. >>> print ( client . dashboards ) DashboardsService ( attributes : [ 'endpoint' ], methods : [ 'create' , 'create_widget' , 'delete' , 'duplicate' , 'exists' , 'favorite' , 'favorited' , 'get' , 'get_all' , 'get_by_name' , 'get_by_tags' , 'get_id' , 'get_slug' , 'paginate' , 'publish' , 'refresh' , 'share' , 'unfavorite' , 'unpublish' , 'update' ]) for more examples on usage, see examples folder on github. Development before starting development, install dev depndencies: pip install redash-python [ dev ] Architecture this library implements a services based architecture splitting each API endpoint group to its own service, on top of which is the Redash class. all the services share base classes from mixins that make it easier to share common behavior and allows rapid development for any new endpoints. for instance adding query_snippets is as simple as: from .base import BaseService from .mixins import CommonMixin , NameMixin , PrintMixin class QSnipsService ( CommonMixin , NameMixin , PrintMixin ): def __init__ ( self , base : BaseService ) -> None : # init mixins CommonMixin . __init__ ( self , base ) self . __base = base self . endpoint = \"/api/query_snippets\" Directory Structure redash_python \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 redash.py # Services wrapper \u2514\u2500\u2500 services # implemented services \u251c\u2500\u2500 base.py # Base service class \u2514\u2500\u2500 mixins.py # Mixins for services with shared functionality Contributing Contributions are welcome, please open an issue or PR to propse any changes. License","title":"Home"},{"location":"#features","text":"Complete access to all endpoints in the Redash API Pagination by default Duplicate dashboards Manage users and groups Duplicate queries with differerent source tables","title":"Features"},{"location":"#implemented-services","text":"Dashboards Queries Data Sources Alerts Users Destinations Groups query_snippets Widgets* * widgets endpoint does not support GET requests, only update, delete and create.","title":"Implemented Services"},{"location":"#getting-started","text":"an API key is required in addition to the instance's host URL.","title":"Getting Started"},{"location":"#installation","text":"pip install redash-python","title":"Installation"},{"location":"#usage","text":"from redash_python import Redash rd = Redash ( base_url = \"\" , api_key = \"\" ) # get all dashboards dashboards = rd . dashboards . get_all () # get specific dashboards by id dash = rd . dashboards . get ( 1 ) # get by slug or name query = rd . queries . get_by_name ( \"my-dashboard\" ) # get by tags q = rd . queries . get_by_tags ([ \"my-tag\" ]) # get without tags dash = rd . dashboards . get_by_tags ([ \"my-tag\" ], without = True ) # Duplicate query with a different table as source ques = rd . queries ques . duplicate_query_table ( query = ques . get ( 1 ), table_map = { \"old_table\" : \"new_table\" }, tags = [ \"admin\" , \"test\" ], publish = True , ) # get a list of implemented API endpoints print ( rd . services ) # get a list of implemented endpoints in a service print ( rd . users ) for a full list of implemented methods in each service, print the service object. >>> print ( client . dashboards ) DashboardsService ( attributes : [ 'endpoint' ], methods : [ 'create' , 'create_widget' , 'delete' , 'duplicate' , 'exists' , 'favorite' , 'favorited' , 'get' , 'get_all' , 'get_by_name' , 'get_by_tags' , 'get_id' , 'get_slug' , 'paginate' , 'publish' , 'refresh' , 'share' , 'unfavorite' , 'unpublish' , 'update' ]) for more examples on usage, see examples folder on github.","title":"Usage"},{"location":"#development","text":"before starting development, install dev depndencies: pip install redash-python [ dev ]","title":"Development"},{"location":"#architecture","text":"this library implements a services based architecture splitting each API endpoint group to its own service, on top of which is the Redash class. all the services share base classes from mixins that make it easier to share common behavior and allows rapid development for any new endpoints. for instance adding query_snippets is as simple as: from .base import BaseService from .mixins import CommonMixin , NameMixin , PrintMixin class QSnipsService ( CommonMixin , NameMixin , PrintMixin ): def __init__ ( self , base : BaseService ) -> None : # init mixins CommonMixin . __init__ ( self , base ) self . __base = base self . endpoint = \"/api/query_snippets\"","title":"Architecture"},{"location":"#directory-structure","text":"redash_python \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 redash.py # Services wrapper \u2514\u2500\u2500 services # implemented services \u251c\u2500\u2500 base.py # Base service class \u2514\u2500\u2500 mixins.py # Mixins for services with shared functionality","title":"Directory Structure"},{"location":"#contributing","text":"Contributions are welcome, please open an issue or PR to propse any changes.","title":"Contributing"},{"location":"#license","text":"","title":"License"},{"location":"api/redash/","text":"Class Redash class Redash () [view_source] Top Class of The Redash API Client hierarchy. Arguments : base_url str - The base URL of the Redash instance. api_key str - The API key for the Redash instance. Usage: from redash_python import Redash rd = Redash(\"https://redash.example.com\", \"API_KEY\") rd.dashboards.get_all() test_credentials def test_credentials () [view_source] Test whether current credentials are valid","title":"Redash"},{"location":"api/redash/#class-redash","text":"class Redash () [view_source] Top Class of The Redash API Client hierarchy. Arguments : base_url str - The base URL of the Redash instance. api_key str - The API key for the Redash instance. Usage: from redash_python import Redash rd = Redash(\"https://redash.example.com\", \"API_KEY\") rd.dashboards.get_all()","title":"Class Redash"},{"location":"api/redash/#test_credentials","text":"def test_credentials () [view_source] Test whether current credentials are valid","title":"test_credentials"},{"location":"api/services/alerts/","text":"this service has no specific implementations other than the default mixins. Class CommonMixin class CommonMixin () [view_source] Mixin with common methods for services. get def get ( id : int ) -> Dict [view_source] Fetch one by ID get_all def get_all () -> List [ Dict ] [view_source] fetch all objects. update def update ( id : int , data : Dict ) -> Dict [view_source] Update by ID create def create ( data : Dict ) -> Dict [view_source] Create a new object with data delete def delete ( id : int ) -> None [view_source] Delete by ID Class NameMixin class NameMixin () [view_source] Mixin for nameable services (by name or slug). exists def exists ( name_or_slug : str ) -> bool [view_source] Check if an object with given name_or_slug exists get_by_name def get_by_name ( name_or_slug : str ) -> Optional [ Dict ] [view_source] Get by name or slug get_id def get_id ( name_or_slug : str ) -> Optional [ int ] [view_source] Get the ID for an object by name or slug, returns None if not found Class PrintMixin class PrintMixin () [view_source] Mixin class for printing data","title":"Alerts"},{"location":"api/services/alerts/#class-commonmixin","text":"class CommonMixin () [view_source] Mixin with common methods for services.","title":"Class CommonMixin"},{"location":"api/services/alerts/#get","text":"def get ( id : int ) -> Dict [view_source] Fetch one by ID","title":"get"},{"location":"api/services/alerts/#get_all","text":"def get_all () -> List [ Dict ] [view_source] fetch all objects.","title":"get_all"},{"location":"api/services/alerts/#update","text":"def update ( id : int , data : Dict ) -> Dict [view_source] Update by ID","title":"update"},{"location":"api/services/alerts/#create","text":"def create ( data : Dict ) -> Dict [view_source] Create a new object with data","title":"create"},{"location":"api/services/alerts/#delete","text":"def delete ( id : int ) -> None [view_source] Delete by ID","title":"delete"},{"location":"api/services/alerts/#class-namemixin","text":"class NameMixin () [view_source] Mixin for nameable services (by name or slug).","title":"Class NameMixin"},{"location":"api/services/alerts/#exists","text":"def exists ( name_or_slug : str ) -> bool [view_source] Check if an object with given name_or_slug exists","title":"exists"},{"location":"api/services/alerts/#get_by_name","text":"def get_by_name ( name_or_slug : str ) -> Optional [ Dict ] [view_source] Get by name or slug","title":"get_by_name"},{"location":"api/services/alerts/#get_id","text":"def get_id ( name_or_slug : str ) -> Optional [ int ] [view_source] Get the ID for an object by name or slug, returns None if not found","title":"get_id"},{"location":"api/services/alerts/#class-printmixin","text":"class PrintMixin () [view_source] Mixin class for printing data","title":"Class PrintMixin"},{"location":"api/services/base/","text":"Class BaseService class BaseService () [view_source] Singleton Base Service class post @final def post ( endpoint : str , data : Dict , ** kwargs ) -> Dict [view_source] Perform a POST request to the endpoint with the given data get @final def get ( endpoint : str , data : Optional [ Dict ] = None , ** kwargs ) -> Dict [view_source] Perform a GET request to the endpoint delete @final def delete ( endpoint : str , ** kwargs ) -> None [view_source] Perform a DELETE request to the endpoint","title":"Base"},{"location":"api/services/base/#class-baseservice","text":"class BaseService () [view_source] Singleton Base Service class","title":"Class BaseService"},{"location":"api/services/base/#post","text":"@final def post ( endpoint : str , data : Dict , ** kwargs ) -> Dict [view_source] Perform a POST request to the endpoint with the given data","title":"post"},{"location":"api/services/base/#get","text":"@final def get ( endpoint : str , data : Optional [ Dict ] = None , ** kwargs ) -> Dict [view_source] Perform a GET request to the endpoint","title":"get"},{"location":"api/services/base/#delete","text":"@final def delete ( endpoint : str , ** kwargs ) -> None [view_source] Perform a DELETE request to the endpoint","title":"delete"},{"location":"api/services/dashboards/","text":"Class DashboardsService class DashboardsService ( FavoriteMixin , CommonMixin , TagsMixin , PublishMixin , NameMixin , PrintMixin , PaginationMixin ) [view_source] get_slug def get_slug ( dashboard_id : int ) -> Optional [ str ] [view_source] Get the slug for a dashboard by ID refresh def refresh ( dashboard_id : int ) -> None [view_source] Refresh a dashboard share def share ( dashboard_id : int ) -> str [view_source] get public url for dashboard duplicate def duplicate ( dashboard_id : int , new_name : Optional [ str ] = None ) -> Dict [view_source] Duplicate a dashboard and all its widgets with new_name create_widget def create_widget ( * , dashboard_id : int , visualization_id : Optional [ int ], options : Dict , text : str = \"\" ) -> Dict [view_source] create new widget in given dashboard Arguments : dashboard_id - id of dashboard to create widget in visualization_id - id of visualization to use for widget (pass None for text widget) options - options to use for widget text - text to use for text widget Class FavoriteMixin class FavoriteMixin () [view_source] Mixin for favoriteable services favorited def favorited () -> List [ Dict ] [view_source] Get all favorited objects favorite def favorite ( id : int ) -> Dict [view_source] Favorite an object unfavorite def unfavorite ( id : int ) -> Dict [view_source] Unfavorite an object Class CommonMixin class CommonMixin () [view_source] Mixin with common methods for services. get def get ( id : int ) -> Dict [view_source] Fetch one by ID get_all def get_all () -> List [ Dict ] [view_source] fetch all objects. update def update ( id : int , data : Dict ) -> Dict [view_source] Update by ID create def create ( data : Dict ) -> Dict [view_source] Create a new object with data delete def delete ( id : int ) -> None [view_source] Delete by ID Class TagsMixin class TagsMixin () [view_source] Mixin for taggable services get_by_tags def get_by_tags ( tags : List [ str ], without : bool = False , match_all : bool = True ) -> List [ Dict ] [view_source] Get all objects with all or any of tags or all objects without any of tags Class PublishMixin class PublishMixin () [view_source] Mixin for publishable services publish def publish ( id : int ) -> Dict [view_source] Publish an object unpublish def unpublish ( id : int ) -> Dict [view_source] Unpublish an object Class NameMixin class NameMixin () [view_source] Mixin for nameable services (by name or slug). exists def exists ( name_or_slug : str ) -> bool [view_source] Check if an object with given name_or_slug exists get_by_name def get_by_name ( name_or_slug : str ) -> Optional [ Dict ] [view_source] Get by name or slug get_id def get_id ( name_or_slug : str ) -> Optional [ int ] [view_source] Get the ID for an object by name or slug, returns None if not found Class PrintMixin class PrintMixin () [view_source] Mixin class for printing data Class PaginationMixin class PaginationMixin () [view_source] Mixin for paginated services paginate def paginate ( page : int = 1 , page_size : int = 100 , ** kwargs ) -> List [ Dict ] [view_source] Load all items of a paginated resource fetch_page def fetch_page ( page : int = 1 , page_size : int = 100 , ** kwargs ) -> List [ Dict ] [view_source] Load a page of a paginated resource","title":"Dashboards"},{"location":"api/services/dashboards/#class-dashboardsservice","text":"class DashboardsService ( FavoriteMixin , CommonMixin , TagsMixin , PublishMixin , NameMixin , PrintMixin , PaginationMixin ) [view_source]","title":"Class DashboardsService"},{"location":"api/services/dashboards/#get_slug","text":"def get_slug ( dashboard_id : int ) -> Optional [ str ] [view_source] Get the slug for a dashboard by ID","title":"get_slug"},{"location":"api/services/dashboards/#refresh","text":"def refresh ( dashboard_id : int ) -> None [view_source] Refresh a dashboard","title":"refresh"},{"location":"api/services/dashboards/#share","text":"def share ( dashboard_id : int ) -> str [view_source] get public url for dashboard","title":"share"},{"location":"api/services/dashboards/#duplicate","text":"def duplicate ( dashboard_id : int , new_name : Optional [ str ] = None ) -> Dict [view_source] Duplicate a dashboard and all its widgets with new_name","title":"duplicate"},{"location":"api/services/dashboards/#create_widget","text":"def create_widget ( * , dashboard_id : int , visualization_id : Optional [ int ], options : Dict , text : str = \"\" ) -> Dict [view_source] create new widget in given dashboard Arguments : dashboard_id - id of dashboard to create widget in visualization_id - id of visualization to use for widget (pass None for text widget) options - options to use for widget text - text to use for text widget","title":"create_widget"},{"location":"api/services/dashboards/#class-favoritemixin","text":"class FavoriteMixin () [view_source] Mixin for favoriteable services","title":"Class FavoriteMixin"},{"location":"api/services/dashboards/#favorited","text":"def favorited () -> List [ Dict ] [view_source] Get all favorited objects","title":"favorited"},{"location":"api/services/dashboards/#favorite","text":"def favorite ( id : int ) -> Dict [view_source] Favorite an object","title":"favorite"},{"location":"api/services/dashboards/#unfavorite","text":"def unfavorite ( id : int ) -> Dict [view_source] Unfavorite an object","title":"unfavorite"},{"location":"api/services/dashboards/#class-commonmixin","text":"class CommonMixin () [view_source] Mixin with common methods for services.","title":"Class CommonMixin"},{"location":"api/services/dashboards/#get","text":"def get ( id : int ) -> Dict [view_source] Fetch one by ID","title":"get"},{"location":"api/services/dashboards/#get_all","text":"def get_all () -> List [ Dict ] [view_source] fetch all objects.","title":"get_all"},{"location":"api/services/dashboards/#update","text":"def update ( id : int , data : Dict ) -> Dict [view_source] Update by ID","title":"update"},{"location":"api/services/dashboards/#create","text":"def create ( data : Dict ) -> Dict [view_source] Create a new object with data","title":"create"},{"location":"api/services/dashboards/#delete","text":"def delete ( id : int ) -> None [view_source] Delete by ID","title":"delete"},{"location":"api/services/dashboards/#class-tagsmixin","text":"class TagsMixin () [view_source] Mixin for taggable services","title":"Class TagsMixin"},{"location":"api/services/dashboards/#get_by_tags","text":"def get_by_tags ( tags : List [ str ], without : bool = False , match_all : bool = True ) -> List [ Dict ] [view_source] Get all objects with all or any of tags or all objects without any of tags","title":"get_by_tags"},{"location":"api/services/dashboards/#class-publishmixin","text":"class PublishMixin () [view_source] Mixin for publishable services","title":"Class PublishMixin"},{"location":"api/services/dashboards/#publish","text":"def publish ( id : int ) -> Dict [view_source] Publish an object","title":"publish"},{"location":"api/services/dashboards/#unpublish","text":"def unpublish ( id : int ) -> Dict [view_source] Unpublish an object","title":"unpublish"},{"location":"api/services/dashboards/#class-namemixin","text":"class NameMixin () [view_source] Mixin for nameable services (by name or slug).","title":"Class NameMixin"},{"location":"api/services/dashboards/#exists","text":"def exists ( name_or_slug : str ) -> bool [view_source] Check if an object with given name_or_slug exists","title":"exists"},{"location":"api/services/dashboards/#get_by_name","text":"def get_by_name ( name_or_slug : str ) -> Optional [ Dict ] [view_source] Get by name or slug","title":"get_by_name"},{"location":"api/services/dashboards/#get_id","text":"def get_id ( name_or_slug : str ) -> Optional [ int ] [view_source] Get the ID for an object by name or slug, returns None if not found","title":"get_id"},{"location":"api/services/dashboards/#class-printmixin","text":"class PrintMixin () [view_source] Mixin class for printing data","title":"Class PrintMixin"},{"location":"api/services/dashboards/#class-paginationmixin","text":"class PaginationMixin () [view_source] Mixin for paginated services","title":"Class PaginationMixin"},{"location":"api/services/dashboards/#paginate","text":"def paginate ( page : int = 1 , page_size : int = 100 , ** kwargs ) -> List [ Dict ] [view_source] Load all items of a paginated resource","title":"paginate"},{"location":"api/services/dashboards/#fetch_page","text":"def fetch_page ( page : int = 1 , page_size : int = 100 , ** kwargs ) -> List [ Dict ] [view_source] Load a page of a paginated resource","title":"fetch_page"},{"location":"api/services/data_sources/","text":"this service has no specific implementations other than the default mixins. Class CommonMixin class CommonMixin () [view_source] Mixin with common methods for services. get def get ( id : int ) -> Dict [view_source] Fetch one by ID get_all def get_all () -> List [ Dict ] [view_source] fetch all objects. update def update ( id : int , data : Dict ) -> Dict [view_source] Update by ID create def create ( data : Dict ) -> Dict [view_source] Create a new object with data delete def delete ( id : int ) -> None [view_source] Delete by ID Class NameMixin class NameMixin () [view_source] Mixin for nameable services (by name or slug). exists def exists ( name_or_slug : str ) -> bool [view_source] Check if an object with given name_or_slug exists get_by_name def get_by_name ( name_or_slug : str ) -> Optional [ Dict ] [view_source] Get by name or slug get_id def get_id ( name_or_slug : str ) -> Optional [ int ] [view_source] Get the ID for an object by name or slug, returns None if not found Class PrintMixin class PrintMixin () [view_source] Mixin class for printing data","title":"Data Sources"},{"location":"api/services/data_sources/#class-commonmixin","text":"class CommonMixin () [view_source] Mixin with common methods for services.","title":"Class CommonMixin"},{"location":"api/services/data_sources/#get","text":"def get ( id : int ) -> Dict [view_source] Fetch one by ID","title":"get"},{"location":"api/services/data_sources/#get_all","text":"def get_all () -> List [ Dict ] [view_source] fetch all objects.","title":"get_all"},{"location":"api/services/data_sources/#update","text":"def update ( id : int , data : Dict ) -> Dict [view_source] Update by ID","title":"update"},{"location":"api/services/data_sources/#create","text":"def create ( data : Dict ) -> Dict [view_source] Create a new object with data","title":"create"},{"location":"api/services/data_sources/#delete","text":"def delete ( id : int ) -> None [view_source] Delete by ID","title":"delete"},{"location":"api/services/data_sources/#class-namemixin","text":"class NameMixin () [view_source] Mixin for nameable services (by name or slug).","title":"Class NameMixin"},{"location":"api/services/data_sources/#exists","text":"def exists ( name_or_slug : str ) -> bool [view_source] Check if an object with given name_or_slug exists","title":"exists"},{"location":"api/services/data_sources/#get_by_name","text":"def get_by_name ( name_or_slug : str ) -> Optional [ Dict ] [view_source] Get by name or slug","title":"get_by_name"},{"location":"api/services/data_sources/#get_id","text":"def get_id ( name_or_slug : str ) -> Optional [ int ] [view_source] Get the ID for an object by name or slug, returns None if not found","title":"get_id"},{"location":"api/services/data_sources/#class-printmixin","text":"class PrintMixin () [view_source] Mixin class for printing data","title":"Class PrintMixin"},{"location":"api/services/destinations/","text":"this service has no specific implementations other than the default mixins. Class CommonMixin class CommonMixin () [view_source] Mixin with common methods for services. get def get ( id : int ) -> Dict [view_source] Fetch one by ID get_all def get_all () -> List [ Dict ] [view_source] fetch all objects. update def update ( id : int , data : Dict ) -> Dict [view_source] Update by ID create def create ( data : Dict ) -> Dict [view_source] Create a new object with data delete def delete ( id : int ) -> None [view_source] Delete by ID Class NameMixin class NameMixin () [view_source] Mixin for nameable services (by name or slug). exists def exists ( name_or_slug : str ) -> bool [view_source] Check if an object with given name_or_slug exists get_by_name def get_by_name ( name_or_slug : str ) -> Optional [ Dict ] [view_source] Get by name or slug get_id def get_id ( name_or_slug : str ) -> Optional [ int ] [view_source] Get the ID for an object by name or slug, returns None if not found Class PrintMixin class PrintMixin () [view_source] Mixin class for printing data","title":"Destinations"},{"location":"api/services/destinations/#class-commonmixin","text":"class CommonMixin () [view_source] Mixin with common methods for services.","title":"Class CommonMixin"},{"location":"api/services/destinations/#get","text":"def get ( id : int ) -> Dict [view_source] Fetch one by ID","title":"get"},{"location":"api/services/destinations/#get_all","text":"def get_all () -> List [ Dict ] [view_source] fetch all objects.","title":"get_all"},{"location":"api/services/destinations/#update","text":"def update ( id : int , data : Dict ) -> Dict [view_source] Update by ID","title":"update"},{"location":"api/services/destinations/#create","text":"def create ( data : Dict ) -> Dict [view_source] Create a new object with data","title":"create"},{"location":"api/services/destinations/#delete","text":"def delete ( id : int ) -> None [view_source] Delete by ID","title":"delete"},{"location":"api/services/destinations/#class-namemixin","text":"class NameMixin () [view_source] Mixin for nameable services (by name or slug).","title":"Class NameMixin"},{"location":"api/services/destinations/#exists","text":"def exists ( name_or_slug : str ) -> bool [view_source] Check if an object with given name_or_slug exists","title":"exists"},{"location":"api/services/destinations/#get_by_name","text":"def get_by_name ( name_or_slug : str ) -> Optional [ Dict ] [view_source] Get by name or slug","title":"get_by_name"},{"location":"api/services/destinations/#get_id","text":"def get_id ( name_or_slug : str ) -> Optional [ int ] [view_source] Get the ID for an object by name or slug, returns None if not found","title":"get_id"},{"location":"api/services/destinations/#class-printmixin","text":"class PrintMixin () [view_source] Mixin class for printing data","title":"Class PrintMixin"},{"location":"api/services/groups/","text":"this service has no specific implementations other than the default mixins. Class CommonMixin class CommonMixin () [view_source] Mixin with common methods for services. get def get ( id : int ) -> Dict [view_source] Fetch one by ID get_all def get_all () -> List [ Dict ] [view_source] fetch all objects. update def update ( id : int , data : Dict ) -> Dict [view_source] Update by ID create def create ( data : Dict ) -> Dict [view_source] Create a new object with data delete def delete ( id : int ) -> None [view_source] Delete by ID Class NameMixin class NameMixin () [view_source] Mixin for nameable services (by name or slug). exists def exists ( name_or_slug : str ) -> bool [view_source] Check if an object with given name_or_slug exists get_by_name def get_by_name ( name_or_slug : str ) -> Optional [ Dict ] [view_source] Get by name or slug get_id def get_id ( name_or_slug : str ) -> Optional [ int ] [view_source] Get the ID for an object by name or slug, returns None if not found Class PrintMixin class PrintMixin () [view_source] Mixin class for printing data","title":"Groups"},{"location":"api/services/groups/#class-commonmixin","text":"class CommonMixin () [view_source] Mixin with common methods for services.","title":"Class CommonMixin"},{"location":"api/services/groups/#get","text":"def get ( id : int ) -> Dict [view_source] Fetch one by ID","title":"get"},{"location":"api/services/groups/#get_all","text":"def get_all () -> List [ Dict ] [view_source] fetch all objects.","title":"get_all"},{"location":"api/services/groups/#update","text":"def update ( id : int , data : Dict ) -> Dict [view_source] Update by ID","title":"update"},{"location":"api/services/groups/#create","text":"def create ( data : Dict ) -> Dict [view_source] Create a new object with data","title":"create"},{"location":"api/services/groups/#delete","text":"def delete ( id : int ) -> None [view_source] Delete by ID","title":"delete"},{"location":"api/services/groups/#class-namemixin","text":"class NameMixin () [view_source] Mixin for nameable services (by name or slug).","title":"Class NameMixin"},{"location":"api/services/groups/#exists","text":"def exists ( name_or_slug : str ) -> bool [view_source] Check if an object with given name_or_slug exists","title":"exists"},{"location":"api/services/groups/#get_by_name","text":"def get_by_name ( name_or_slug : str ) -> Optional [ Dict ] [view_source] Get by name or slug","title":"get_by_name"},{"location":"api/services/groups/#get_id","text":"def get_id ( name_or_slug : str ) -> Optional [ int ] [view_source] Get the ID for an object by name or slug, returns None if not found","title":"get_id"},{"location":"api/services/groups/#class-printmixin","text":"class PrintMixin () [view_source] Mixin class for printing data","title":"Class PrintMixin"},{"location":"api/services/mixins/","text":"Classes contanting shared functionality used by all other services. Class PrintMixin class PrintMixin () [view_source] Mixin class for printing data Class CommonMixin class CommonMixin () [view_source] Mixin with common methods for services. get def get ( id : int ) -> Dict [view_source] Fetch one by ID get_all def get_all () -> List [ Dict ] [view_source] fetch all objects. update def update ( id : int , data : Dict ) -> Dict [view_source] Update by ID create def create ( data : Dict ) -> Dict [view_source] Create a new object with data delete def delete ( id : int ) -> None [view_source] Delete by ID Class NameMixin class NameMixin () [view_source] Mixin for nameable services (by name or slug). exists def exists ( name_or_slug : str ) -> bool [view_source] Check if an object with given name_or_slug exists get_by_name def get_by_name ( name_or_slug : str ) -> Optional [ Dict ] [view_source] Get by name or slug get_id def get_id ( name_or_slug : str ) -> Optional [ int ] [view_source] Get the ID for an object by name or slug, returns None if not found Class TagsMixin class TagsMixin () [view_source] Mixin for taggable services get_by_tags def get_by_tags ( tags : List [ str ], without : bool = False , match_all : bool = True ) -> List [ Dict ] [view_source] Get all objects with all or any of tags or all objects without any of tags Class PublishMixin class PublishMixin () [view_source] Mixin for publishable services publish def publish ( id : int ) -> Dict [view_source] Publish an object unpublish def unpublish ( id : int ) -> Dict [view_source] Unpublish an object Class FavoriteMixin class FavoriteMixin () [view_source] Mixin for favoriteable services favorited def favorited () -> List [ Dict ] [view_source] Get all favorited objects favorite def favorite ( id : int ) -> Dict [view_source] Favorite an object unfavorite def unfavorite ( id : int ) -> Dict [view_source] Unfavorite an object Class PaginationMixin class PaginationMixin () [view_source] Mixin for paginated services paginate def paginate ( page : int = 1 , page_size : int = 100 , ** kwargs ) -> List [ Dict ] [view_source] Load all items of a paginated resource fetch_page def fetch_page ( page : int = 1 , page_size : int = 100 , ** kwargs ) -> List [ Dict ] [view_source] Load a page of a paginated resource","title":"Mixins"},{"location":"api/services/mixins/#class-printmixin","text":"class PrintMixin () [view_source] Mixin class for printing data","title":"Class PrintMixin"},{"location":"api/services/mixins/#class-commonmixin","text":"class CommonMixin () [view_source] Mixin with common methods for services.","title":"Class CommonMixin"},{"location":"api/services/mixins/#get","text":"def get ( id : int ) -> Dict [view_source] Fetch one by ID","title":"get"},{"location":"api/services/mixins/#get_all","text":"def get_all () -> List [ Dict ] [view_source] fetch all objects.","title":"get_all"},{"location":"api/services/mixins/#update","text":"def update ( id : int , data : Dict ) -> Dict [view_source] Update by ID","title":"update"},{"location":"api/services/mixins/#create","text":"def create ( data : Dict ) -> Dict [view_source] Create a new object with data","title":"create"},{"location":"api/services/mixins/#delete","text":"def delete ( id : int ) -> None [view_source] Delete by ID","title":"delete"},{"location":"api/services/mixins/#class-namemixin","text":"class NameMixin () [view_source] Mixin for nameable services (by name or slug).","title":"Class NameMixin"},{"location":"api/services/mixins/#exists","text":"def exists ( name_or_slug : str ) -> bool [view_source] Check if an object with given name_or_slug exists","title":"exists"},{"location":"api/services/mixins/#get_by_name","text":"def get_by_name ( name_or_slug : str ) -> Optional [ Dict ] [view_source] Get by name or slug","title":"get_by_name"},{"location":"api/services/mixins/#get_id","text":"def get_id ( name_or_slug : str ) -> Optional [ int ] [view_source] Get the ID for an object by name or slug, returns None if not found","title":"get_id"},{"location":"api/services/mixins/#class-tagsmixin","text":"class TagsMixin () [view_source] Mixin for taggable services","title":"Class TagsMixin"},{"location":"api/services/mixins/#get_by_tags","text":"def get_by_tags ( tags : List [ str ], without : bool = False , match_all : bool = True ) -> List [ Dict ] [view_source] Get all objects with all or any of tags or all objects without any of tags","title":"get_by_tags"},{"location":"api/services/mixins/#class-publishmixin","text":"class PublishMixin () [view_source] Mixin for publishable services","title":"Class PublishMixin"},{"location":"api/services/mixins/#publish","text":"def publish ( id : int ) -> Dict [view_source] Publish an object","title":"publish"},{"location":"api/services/mixins/#unpublish","text":"def unpublish ( id : int ) -> Dict [view_source] Unpublish an object","title":"unpublish"},{"location":"api/services/mixins/#class-favoritemixin","text":"class FavoriteMixin () [view_source] Mixin for favoriteable services","title":"Class FavoriteMixin"},{"location":"api/services/mixins/#favorited","text":"def favorited () -> List [ Dict ] [view_source] Get all favorited objects","title":"favorited"},{"location":"api/services/mixins/#favorite","text":"def favorite ( id : int ) -> Dict [view_source] Favorite an object","title":"favorite"},{"location":"api/services/mixins/#unfavorite","text":"def unfavorite ( id : int ) -> Dict [view_source] Unfavorite an object","title":"unfavorite"},{"location":"api/services/mixins/#class-paginationmixin","text":"class PaginationMixin () [view_source] Mixin for paginated services","title":"Class PaginationMixin"},{"location":"api/services/mixins/#paginate","text":"def paginate ( page : int = 1 , page_size : int = 100 , ** kwargs ) -> List [ Dict ] [view_source] Load all items of a paginated resource","title":"paginate"},{"location":"api/services/mixins/#fetch_page","text":"def fetch_page ( page : int = 1 , page_size : int = 100 , ** kwargs ) -> List [ Dict ] [view_source] Load a page of a paginated resource","title":"fetch_page"},{"location":"api/services/queries/","text":"Class QueriesService class QueriesService ( FavoriteMixin , CommonMixin , TagsMixin , PublishMixin , NameMixin , PrintMixin , PaginationMixin ) [view_source] refresh def refresh ( query_id : int ) -> Dict [view_source] Refresh a query fork def fork ( query_id : int , new_name : str = None ) -> Dict [view_source] Fork a query with a new name if provided scheduled def scheduled () -> List [ Dict ] [view_source] Get all scheduled queries update_visualization def update_visualization ( vis_id : int , data : Dict ) -> Dict [view_source] Update a visualization with data duplicate_query_table def duplicate_query_table ( * , query : Dict , new_name : str = None , table_map : Dict [ str , str ], tags : List [ str ], new_data_source_id : Optional [ int ] = None , publish : bool = True ) -> Dict [view_source] Duplicate query with source tables replaced according to table_map. Arguments : query(Dict) - query data object new_name(str) - new query name (optional) table_map(Dict) - mapping of old to new tables tags(List) - tags to add to new query new_data_source_id(int) - new data source id (optional) publish(bool) - whether to publish the new query Returns : Dict - new query data object Example : query = queries.get(query_id) table_map = { \"old_table\": \"new_table\", \"old_table2\": \"new_table2\", } tags = [\"tag1\", \"tag2\"] new_query = queries.duplicate_query_table( query=query, new_name=\"new_query_name\", table_map=table_map, new_data_source_id=rd.data_sources.get_by_name(\"new_data_source\").id, tags=tags, ) Class FavoriteMixin class FavoriteMixin () [view_source] Mixin for favoriteable services favorited def favorited () -> List [ Dict ] [view_source] Get all favorited objects favorite def favorite ( id : int ) -> Dict [view_source] Favorite an object unfavorite def unfavorite ( id : int ) -> Dict [view_source] Unfavorite an object Class CommonMixin class CommonMixin () [view_source] Mixin with common methods for services. get def get ( id : int ) -> Dict [view_source] Fetch one by ID get_all def get_all () -> List [ Dict ] [view_source] fetch all objects. update def update ( id : int , data : Dict ) -> Dict [view_source] Update by ID create def create ( data : Dict ) -> Dict [view_source] Create a new object with data delete def delete ( id : int ) -> None [view_source] Delete by ID Class TagsMixin class TagsMixin () [view_source] Mixin for taggable services get_by_tags def get_by_tags ( tags : List [ str ], without : bool = False , match_all : bool = True ) -> List [ Dict ] [view_source] Get all objects with all or any of tags or all objects without any of tags Class PublishMixin class PublishMixin () [view_source] Mixin for publishable services publish def publish ( id : int ) -> Dict [view_source] Publish an object unpublish def unpublish ( id : int ) -> Dict [view_source] Unpublish an object Class NameMixin class NameMixin () [view_source] Mixin for nameable services (by name or slug). exists def exists ( name_or_slug : str ) -> bool [view_source] Check if an object with given name_or_slug exists get_by_name def get_by_name ( name_or_slug : str ) -> Optional [ Dict ] [view_source] Get by name or slug get_id def get_id ( name_or_slug : str ) -> Optional [ int ] [view_source] Get the ID for an object by name or slug, returns None if not found Class PrintMixin class PrintMixin () [view_source] Mixin class for printing data Class PaginationMixin class PaginationMixin () [view_source] Mixin for paginated services paginate def paginate ( page : int = 1 , page_size : int = 100 , ** kwargs ) -> List [ Dict ] [view_source] Load all items of a paginated resource fetch_page def fetch_page ( page : int = 1 , page_size : int = 100 , ** kwargs ) -> List [ Dict ] [view_source] Load a page of a paginated resource","title":"Queries"},{"location":"api/services/queries/#class-queriesservice","text":"class QueriesService ( FavoriteMixin , CommonMixin , TagsMixin , PublishMixin , NameMixin , PrintMixin , PaginationMixin ) [view_source]","title":"Class QueriesService"},{"location":"api/services/queries/#refresh","text":"def refresh ( query_id : int ) -> Dict [view_source] Refresh a query","title":"refresh"},{"location":"api/services/queries/#fork","text":"def fork ( query_id : int , new_name : str = None ) -> Dict [view_source] Fork a query with a new name if provided","title":"fork"},{"location":"api/services/queries/#scheduled","text":"def scheduled () -> List [ Dict ] [view_source] Get all scheduled queries","title":"scheduled"},{"location":"api/services/queries/#update_visualization","text":"def update_visualization ( vis_id : int , data : Dict ) -> Dict [view_source] Update a visualization with data","title":"update_visualization"},{"location":"api/services/queries/#duplicate_query_table","text":"def duplicate_query_table ( * , query : Dict , new_name : str = None , table_map : Dict [ str , str ], tags : List [ str ], new_data_source_id : Optional [ int ] = None , publish : bool = True ) -> Dict [view_source] Duplicate query with source tables replaced according to table_map. Arguments : query(Dict) - query data object new_name(str) - new query name (optional) table_map(Dict) - mapping of old to new tables tags(List) - tags to add to new query new_data_source_id(int) - new data source id (optional) publish(bool) - whether to publish the new query Returns : Dict - new query data object Example : query = queries.get(query_id) table_map = { \"old_table\": \"new_table\", \"old_table2\": \"new_table2\", } tags = [\"tag1\", \"tag2\"] new_query = queries.duplicate_query_table( query=query, new_name=\"new_query_name\", table_map=table_map, new_data_source_id=rd.data_sources.get_by_name(\"new_data_source\").id, tags=tags, )","title":"duplicate_query_table"},{"location":"api/services/queries/#class-favoritemixin","text":"class FavoriteMixin () [view_source] Mixin for favoriteable services","title":"Class FavoriteMixin"},{"location":"api/services/queries/#favorited","text":"def favorited () -> List [ Dict ] [view_source] Get all favorited objects","title":"favorited"},{"location":"api/services/queries/#favorite","text":"def favorite ( id : int ) -> Dict [view_source] Favorite an object","title":"favorite"},{"location":"api/services/queries/#unfavorite","text":"def unfavorite ( id : int ) -> Dict [view_source] Unfavorite an object","title":"unfavorite"},{"location":"api/services/queries/#class-commonmixin","text":"class CommonMixin () [view_source] Mixin with common methods for services.","title":"Class CommonMixin"},{"location":"api/services/queries/#get","text":"def get ( id : int ) -> Dict [view_source] Fetch one by ID","title":"get"},{"location":"api/services/queries/#get_all","text":"def get_all () -> List [ Dict ] [view_source] fetch all objects.","title":"get_all"},{"location":"api/services/queries/#update","text":"def update ( id : int , data : Dict ) -> Dict [view_source] Update by ID","title":"update"},{"location":"api/services/queries/#create","text":"def create ( data : Dict ) -> Dict [view_source] Create a new object with data","title":"create"},{"location":"api/services/queries/#delete","text":"def delete ( id : int ) -> None [view_source] Delete by ID","title":"delete"},{"location":"api/services/queries/#class-tagsmixin","text":"class TagsMixin () [view_source] Mixin for taggable services","title":"Class TagsMixin"},{"location":"api/services/queries/#get_by_tags","text":"def get_by_tags ( tags : List [ str ], without : bool = False , match_all : bool = True ) -> List [ Dict ] [view_source] Get all objects with all or any of tags or all objects without any of tags","title":"get_by_tags"},{"location":"api/services/queries/#class-publishmixin","text":"class PublishMixin () [view_source] Mixin for publishable services","title":"Class PublishMixin"},{"location":"api/services/queries/#publish","text":"def publish ( id : int ) -> Dict [view_source] Publish an object","title":"publish"},{"location":"api/services/queries/#unpublish","text":"def unpublish ( id : int ) -> Dict [view_source] Unpublish an object","title":"unpublish"},{"location":"api/services/queries/#class-namemixin","text":"class NameMixin () [view_source] Mixin for nameable services (by name or slug).","title":"Class NameMixin"},{"location":"api/services/queries/#exists","text":"def exists ( name_or_slug : str ) -> bool [view_source] Check if an object with given name_or_slug exists","title":"exists"},{"location":"api/services/queries/#get_by_name","text":"def get_by_name ( name_or_slug : str ) -> Optional [ Dict ] [view_source] Get by name or slug","title":"get_by_name"},{"location":"api/services/queries/#get_id","text":"def get_id ( name_or_slug : str ) -> Optional [ int ] [view_source] Get the ID for an object by name or slug, returns None if not found","title":"get_id"},{"location":"api/services/queries/#class-printmixin","text":"class PrintMixin () [view_source] Mixin class for printing data","title":"Class PrintMixin"},{"location":"api/services/queries/#class-paginationmixin","text":"class PaginationMixin () [view_source] Mixin for paginated services","title":"Class PaginationMixin"},{"location":"api/services/queries/#paginate","text":"def paginate ( page : int = 1 , page_size : int = 100 , ** kwargs ) -> List [ Dict ] [view_source] Load all items of a paginated resource","title":"paginate"},{"location":"api/services/queries/#fetch_page","text":"def fetch_page ( page : int = 1 , page_size : int = 100 , ** kwargs ) -> List [ Dict ] [view_source] Load a page of a paginated resource","title":"fetch_page"},{"location":"api/services/query_snippets/","text":"this service has no specific implementations other than the default mixins. Class CommonMixin class CommonMixin () [view_source] Mixin with common methods for services. get def get ( id : int ) -> Dict [view_source] Fetch one by ID get_all def get_all () -> List [ Dict ] [view_source] fetch all objects. update def update ( id : int , data : Dict ) -> Dict [view_source] Update by ID create def create ( data : Dict ) -> Dict [view_source] Create a new object with data delete def delete ( id : int ) -> None [view_source] Delete by ID Class NameMixin class NameMixin () [view_source] Mixin for nameable services (by name or slug). exists def exists ( name_or_slug : str ) -> bool [view_source] Check if an object with given name_or_slug exists get_by_name def get_by_name ( name_or_slug : str ) -> Optional [ Dict ] [view_source] Get by name or slug get_id def get_id ( name_or_slug : str ) -> Optional [ int ] [view_source] Get the ID for an object by name or slug, returns None if not found Class PrintMixin class PrintMixin () [view_source] Mixin class for printing data","title":"Query Snippets"},{"location":"api/services/query_snippets/#class-commonmixin","text":"class CommonMixin () [view_source] Mixin with common methods for services.","title":"Class CommonMixin"},{"location":"api/services/query_snippets/#get","text":"def get ( id : int ) -> Dict [view_source] Fetch one by ID","title":"get"},{"location":"api/services/query_snippets/#get_all","text":"def get_all () -> List [ Dict ] [view_source] fetch all objects.","title":"get_all"},{"location":"api/services/query_snippets/#update","text":"def update ( id : int , data : Dict ) -> Dict [view_source] Update by ID","title":"update"},{"location":"api/services/query_snippets/#create","text":"def create ( data : Dict ) -> Dict [view_source] Create a new object with data","title":"create"},{"location":"api/services/query_snippets/#delete","text":"def delete ( id : int ) -> None [view_source] Delete by ID","title":"delete"},{"location":"api/services/query_snippets/#class-namemixin","text":"class NameMixin () [view_source] Mixin for nameable services (by name or slug).","title":"Class NameMixin"},{"location":"api/services/query_snippets/#exists","text":"def exists ( name_or_slug : str ) -> bool [view_source] Check if an object with given name_or_slug exists","title":"exists"},{"location":"api/services/query_snippets/#get_by_name","text":"def get_by_name ( name_or_slug : str ) -> Optional [ Dict ] [view_source] Get by name or slug","title":"get_by_name"},{"location":"api/services/query_snippets/#get_id","text":"def get_id ( name_or_slug : str ) -> Optional [ int ] [view_source] Get the ID for an object by name or slug, returns None if not found","title":"get_id"},{"location":"api/services/query_snippets/#class-printmixin","text":"class PrintMixin () [view_source] Mixin class for printing data","title":"Class PrintMixin"},{"location":"api/services/users/","text":"this service has no specific implementations other than the default mixins. Class UsersService class UsersService ( CommonMixin , NameMixin , PrintMixin ) [view_source] disable def disable ( user_id : int ) -> None [view_source] disable user add_group def add_group ( user_id : int , group_id : int ) -> None [view_source] add user to group remove_group def remove_group ( user_id : int , group_id : int ) -> None [view_source] remove user from group Class CommonMixin class CommonMixin () [view_source] Mixin with common methods for services. get def get ( id : int ) -> Dict [view_source] Fetch one by ID get_all def get_all () -> List [ Dict ] [view_source] fetch all objects. update def update ( id : int , data : Dict ) -> Dict [view_source] Update by ID create def create ( data : Dict ) -> Dict [view_source] Create a new object with data delete def delete ( id : int ) -> None [view_source] Delete by ID Class NameMixin class NameMixin () [view_source] Mixin for nameable services (by name or slug). exists def exists ( name_or_slug : str ) -> bool [view_source] Check if an object with given name_or_slug exists get_by_name def get_by_name ( name_or_slug : str ) -> Optional [ Dict ] [view_source] Get by name or slug get_id def get_id ( name_or_slug : str ) -> Optional [ int ] [view_source] Get the ID for an object by name or slug, returns None if not found Class PrintMixin class PrintMixin () [view_source] Mixin class for printing data","title":"Users"},{"location":"api/services/users/#class-usersservice","text":"class UsersService ( CommonMixin , NameMixin , PrintMixin ) [view_source]","title":"Class UsersService"},{"location":"api/services/users/#disable","text":"def disable ( user_id : int ) -> None [view_source] disable user","title":"disable"},{"location":"api/services/users/#add_group","text":"def add_group ( user_id : int , group_id : int ) -> None [view_source] add user to group","title":"add_group"},{"location":"api/services/users/#remove_group","text":"def remove_group ( user_id : int , group_id : int ) -> None [view_source] remove user from group","title":"remove_group"},{"location":"api/services/users/#class-commonmixin","text":"class CommonMixin () [view_source] Mixin with common methods for services.","title":"Class CommonMixin"},{"location":"api/services/users/#get","text":"def get ( id : int ) -> Dict [view_source] Fetch one by ID","title":"get"},{"location":"api/services/users/#get_all","text":"def get_all () -> List [ Dict ] [view_source] fetch all objects.","title":"get_all"},{"location":"api/services/users/#update","text":"def update ( id : int , data : Dict ) -> Dict [view_source] Update by ID","title":"update"},{"location":"api/services/users/#create","text":"def create ( data : Dict ) -> Dict [view_source] Create a new object with data","title":"create"},{"location":"api/services/users/#delete","text":"def delete ( id : int ) -> None [view_source] Delete by ID","title":"delete"},{"location":"api/services/users/#class-namemixin","text":"class NameMixin () [view_source] Mixin for nameable services (by name or slug).","title":"Class NameMixin"},{"location":"api/services/users/#exists","text":"def exists ( name_or_slug : str ) -> bool [view_source] Check if an object with given name_or_slug exists","title":"exists"},{"location":"api/services/users/#get_by_name","text":"def get_by_name ( name_or_slug : str ) -> Optional [ Dict ] [view_source] Get by name or slug","title":"get_by_name"},{"location":"api/services/users/#get_id","text":"def get_id ( name_or_slug : str ) -> Optional [ int ] [view_source] Get the ID for an object by name or slug, returns None if not found","title":"get_id"},{"location":"api/services/users/#class-printmixin","text":"class PrintMixin () [view_source] Mixin class for printing data","title":"Class PrintMixin"},{"location":"api/services/widgets/","text":"Class WidgetsService class WidgetsService ( CommonMixin , PrintMixin ) [view_source] Service for managing widgets only supports create, delete and update (DELETE, POST) does not support get_all or get (GET) create def create ( * , dashboard_id : int , visualization_id : Optional [ int ], options : Dict , text : str = \"\" ) -> Dict [view_source] create new widget in given dashboard Arguments : dashboard_id - id of dashboard to create widget in visualization_id - id of visualization to use for widget (pass None for text widget) options - options to use for widget text - text to use for text widget CommonMixin update def update ( id : int , data : Dict ) -> Dict [view_source] Update by ID delete def delete ( id : int ) -> None [view_source] Delete by ID Class PrintMixin class PrintMixin () [view_source] Mixin class for printing data","title":"Widgets"},{"location":"api/services/widgets/#class-widgetsservice","text":"class WidgetsService ( CommonMixin , PrintMixin ) [view_source] Service for managing widgets only supports create, delete and update (DELETE, POST) does not support get_all or get (GET)","title":"Class WidgetsService"},{"location":"api/services/widgets/#create","text":"def create ( * , dashboard_id : int , visualization_id : Optional [ int ], options : Dict , text : str = \"\" ) -> Dict [view_source] create new widget in given dashboard Arguments : dashboard_id - id of dashboard to create widget in visualization_id - id of visualization to use for widget (pass None for text widget) options - options to use for widget text - text to use for text widget","title":"create"},{"location":"api/services/widgets/#commonmixin","text":"","title":"CommonMixin"},{"location":"api/services/widgets/#update","text":"def update ( id : int , data : Dict ) -> Dict [view_source] Update by ID","title":"update"},{"location":"api/services/widgets/#delete","text":"def delete ( id : int ) -> None [view_source] Delete by ID","title":"delete"},{"location":"api/services/widgets/#class-printmixin","text":"class PrintMixin () [view_source] Mixin class for printing data","title":"Class PrintMixin"},{"location":"examples/archive_user/","text":"Archive all queries and dashboards witohut given tags clean @app . command ( no_args_is_help = True ) def clean ( host_url : str = Argument ( None , envvar = \"REDASH_HOST\" , help = \"Redash host\" ), api_key : str = Argument ( None , envvar = \"REDASH_API_KEY\" , help = \"Redash api key\" )) -> None [view_source] Clean up all the customer dashboards on redash Arguments : host_url - Redash host api_key - Redash api key Returns : None Usage: python archive_user.py host_url api_key","title":"Archive User"},{"location":"examples/archive_user/#clean","text":"@app . command ( no_args_is_help = True ) def clean ( host_url : str = Argument ( None , envvar = \"REDASH_HOST\" , help = \"Redash host\" ), api_key : str = Argument ( None , envvar = \"REDASH_API_KEY\" , help = \"Redash api key\" )) -> None [view_source] Clean up all the customer dashboards on redash Arguments : host_url - Redash host api_key - Redash api key Returns : None Usage: python archive_user.py host_url api_key","title":"clean"},{"location":"examples/create_client_dashboard/","text":"create_client_template @app . command ( no_args_is_help = True ) def create_client_template ( api_host : str = Argument ( None , envvar = \"API_HOST\" , help = \"Redash API host\" ), api_key : str = Argument ( None , envvar = \"API_KEY\" , help = \"Redash API key\" ), client_name : str = Argument ( None , help = \"Client name\" ), template_tags : List [ str ] = Argument ( None , help = \"Template tags\" ), to_remove_keywords : List [ str ] = Argument ( None , help = \"Keywords to remove widgets with\" )) -> None [view_source] Create client dashboard template based on another template with given template_tags with widgets containing to_remove_keywords in their viualization name removed. Arguments : api_host - Redash API host api_key - Redash API key client_name - Client name template_tags - tags of template to clone from to_remove_tags - keywords to remove widgets from new dashboard with Usage: python examples/create_client_template.py --api_host https://redash.example.com --api_key 1234567890 --client_name test --template_tags template prod","title":"Create client dashboard"},{"location":"examples/create_client_dashboard/#create_client_template","text":"@app . command ( no_args_is_help = True ) def create_client_template ( api_host : str = Argument ( None , envvar = \"API_HOST\" , help = \"Redash API host\" ), api_key : str = Argument ( None , envvar = \"API_KEY\" , help = \"Redash API key\" ), client_name : str = Argument ( None , help = \"Client name\" ), template_tags : List [ str ] = Argument ( None , help = \"Template tags\" ), to_remove_keywords : List [ str ] = Argument ( None , help = \"Keywords to remove widgets with\" )) -> None [view_source] Create client dashboard template based on another template with given template_tags with widgets containing to_remove_keywords in their viualization name removed. Arguments : api_host - Redash API host api_key - Redash API key client_name - Client name template_tags - tags of template to clone from to_remove_tags - keywords to remove widgets from new dashboard with Usage: python examples/create_client_template.py --api_host https://redash.example.com --api_key 1234567890 --client_name test --template_tags template prod","title":"create_client_template"}]}